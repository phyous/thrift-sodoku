#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'sodoku_types'

module Sodoku
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      return recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ping failed: unknown result')
    end

    def solve(input)
      send_solve(input)
      return recv_solve()
    end

    def send_solve(input)
      send_message('solve', Solve_args, :input => input)
    end

    def recv_solve()
      result = receive_message(Solve_result)
      return result.success unless result.success.nil?
      raise result.ouch unless result.ouch.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'solve failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      result.success = @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_solve(seqid, iprot, oprot)
      args = read_args(iprot, Solve_args)
      result = Solve_result.new()
      begin
        result.success = @handler.solve(args.input)
      rescue BadArgumentException => ouch
        result.ouch = ouch
      end
      write_result(result, oprot, 'solve', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Solve_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INPUT = 1

    FIELDS = {
      INPUT => {:type => ::Thrift::Types::STRING, :name => 'input'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Solve_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    OUCH = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => BadArgumentException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

